#!/usr/bin/env python3
# coding: utf-8

import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

# ---------- –ë–î ----------
conn = sqlite3.connect("tasks.db", check_same_thread=False)
c = conn.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    client TEXT,
    order_number TEXT,
    description TEXT,
    address TEXT,
    deadline TEXT,
    avr TEXT,
    solution TEXT,
    status TEXT
)""")
conn.commit()

# ---------- –ö–Ω–æ–ø–∫–∏ / –ú–µ–Ω—é ----------
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new")],
        [InlineKeyboardButton("üìå –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏", callback_data="current")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", callback_data="history")]
    ])

def type_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –û–±—â–∞—è", callback_data="general"),
         InlineKeyboardButton("üöó –í—ã–µ–∑–¥–Ω–∞—è", callback_data="field")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

def client_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üè¢ –ú–∞–∫—Å–∞–≤–∏—Ç", callback_data="–ú–∞–∫—Å–∞–≤–∏—Ç"),
         InlineKeyboardButton("üè≠ –ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å", callback_data="–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å")],
        [InlineKeyboardButton("üëó –ì–ª–æ—Ä–∏—è –î–∂–∏–Ω—Å", callback_data="–ì–ª–æ—Ä–∏—è –î–∂–∏–Ω—Å"),
         InlineKeyboardButton("üõí –ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫", callback_data="–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫")],
        [InlineKeyboardButton("‚õΩ –¢–µ–±–æ–π–ª", callback_data="–¢–µ–±–æ–π–ª"),
         InlineKeyboardButton("‚õΩ –¢–∞—Ç–Ω–µ—Ñ—Ç—å", callback_data="–¢–∞—Ç–Ω–µ—Ñ—Ç—å")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

def confirm_delete_kb(tid):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"confirm_delete_{tid}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"open_{tid}")]
    ])

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def clear_state(context: ContextTypes.DEFAULT_TYPE):
    # —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keys = ["state", "type", "client", "order_number", "description", "address", "deadline", "complete_id", "avr_temp"]
    for k in keys:
        context.user_data.pop(k, None)

# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("User %s started bot", update.effective_user.id)
    clear_state(context)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.", reply_markup=main_menu())

# –º–µ–Ω—é -> –∫–Ω–æ–ø–∫–∏ new/current/history/back
async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    logger.info("menu_callback %s from user %s", data, user_id)

    if data == "new":
        # –Ω–∞—á–∏–Ω–∞–µ–º —Ä—É—á–Ω–æ–π –¥–∏–∞–ª–æ–≥
        context.user_data.clear()
        context.user_data["state"] = "choose_type"
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:", reply_markup=type_menu())
        return

    if data == "current":
        # –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ (active)
        c.execute("SELECT id, type, client, address, description FROM tasks WHERE status='active' ORDER BY id DESC")
        rows = c.fetchall()
        if not rows:
            await query.message.reply_text("üì≠ –ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á.", reply_markup=main_menu())
            return
        kb = []
        for tid, ttype, client, addr, desc in rows:
            if ttype == "field":
                label = f"#{tid} {client} | {addr}"
            else:
                label = f"#{tid} {desc[:30]}..."
            kb.append([InlineKeyboardButton(f"üîé {label}", callback_data=f"open_{tid}")])
        kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])
        await query.message.reply_text("üìå –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=InlineKeyboardMarkup(kb))
        return

    if data == "history":
        # –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ (done)
        c.execute("SELECT id, type, client, address, description FROM tasks WHERE status='done' ORDER BY id DESC LIMIT 30")
        rows = c.fetchall()
        if not rows:
            await query.message.reply_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=main_menu())
            return
        kb = []
        for tid, ttype, client, addr, desc in rows:
            if ttype == "field":
                label = f"#{tid} {client} | {addr}"
            else:
                label = f"#{tid} {desc[:30]}..."
            kb.append([InlineKeyboardButton(f"üìú {label}", callback_data=f"open_{tid}")])
        kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])
        await query.message.reply_text("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á:", reply_markup=InlineKeyboardMarkup(kb))
        return

    if data == "back_main":
        clear_state(context)
        await query.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return

# –∫–Ω–æ–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
async def dialog_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    state = context.user_data.get("state")
    logger.info("dialog_buttons data=%s state=%s user=%s", data, state, query.from_user.id)

    # –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä —Ç–∏–ø–∞
    if state == "choose_type" and data in ("general", "field"):
        context.user_data["type"] = data
        if data == "field":
            context.user_data["state"] = "choose_client"
            await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=client_menu())
            return
        else:
            # –æ–±—â–∞—è: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            context.user_data["state"] = "await_description"
            await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
            return

    # –≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –≤ –≤—ã–µ–∑–¥–Ω–æ–π –∑–∞–¥–∞—á–µ
    if state == "choose_client":
        # –∫–Ω–æ–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏—à–ª–∞
        context.user_data["client"] = data
        context.user_data["state"] = "await_order"
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:")
        return

    # –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á (open, complete, delete, confirm_delete)
    if data.startswith("open_"):
        # –ø–µ—Ä–µ–¥–∞–µ–º –≤ global open handler ‚Äî –Ω–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å open_task
        await open_task(update, context)
        return

    if data.startswith("complete_"):
        await complete_task(update, context)
        return

    if data.startswith("delete_"):
        await delete_task(update, context)
        return

    if data.startswith("confirm_delete_"):
        await confirm_delete(update, context)
        return

    logger.warning("Unhandled dialog button: %s (state=%s)", data, state)

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –µ–¥–∏–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user.id
    text = update.message.text.strip() if update.message.text else ""
    state = context.user_data.get("state")
    logger.info("text_message_handler user=%s state=%s text=%s", user, state, text[:60])

    # –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (–ø—Ä–∏–≥–ª–∞—Å–∏–º –≤ –º–µ–Ω—é)
    if not state:
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.", reply_markup=main_menu())
        return

    # –û–∂–∏–¥–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ (–≤—ã–µ–∑–¥–Ω–∞—è)
    if state == "await_order":
        context.user_data["order_number"] = text
        context.user_data["state"] = "await_address"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
        return

    # –û–∂–∏–¥–∞–µ–º –∞–¥—Ä–µ—Å (–≤—ã–µ–∑–¥–Ω–∞—è)
    if state == "await_address":
        context.user_data["address"] = text
        context.user_data["state"] = "await_description"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        return

    # –û–∂–∏–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–±—â–∞—è –∏–ª–∏ –≤—ã–µ–∑–¥–Ω–∞—è –ø–æ—Å–ª–µ –∞–¥—Ä–µ—Å)
    if state == "await_description":
        context.user_data["description"] = text
        context.user_data["state"] = "await_deadline"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ (–î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú):")
        return

    # –û–∂–∏–¥–∞–µ–º —Å—Ä–æ–∫ ‚Äî –ó–î–ï–°–¨ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
    if state == "await_deadline":
        context.user_data["deadline"] = text
        ud = context.user_data.copy()
        # –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î
        try:
            c.execute("""INSERT INTO tasks (user_id, type, client, order_number, description, address, deadline, status)
                         VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                      (user, ud.get("type"), ud.get("client"),
                       ud.get("order_number"), ud.get("description"), ud.get("address"),
                       ud.get("deadline"), "active"))
            conn.commit()
            tid = c.lastrowid
            logger.info("Task %s created by user %s", tid, user)
        except Exception as e:
            logger.exception("DB insert failed")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu())
            context.user_data.clear()
            return

        # –æ—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        context.user_data.clear()

        # –æ—Ç–≤–µ—Ç –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ #{tid} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–∏–µ!", reply_markup=main_menu())
        return

    # –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –ê–í–† (complete flow)
    if state == "await_solution":
        tid = context.user_data.get("complete_id")
        if not tid:
            await update.message.reply_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: id –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            context.user_data.clear()
            return
        sol = text
        c.execute("UPDATE tasks SET solution=?, status=? WHERE id=?", (sol, "done", tid))
        conn.commit()
        context.user_data.clear()
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ #{tid} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é!", reply_markup=main_menu())
        return

    # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π state ‚Äî –æ—Ç–≤–µ—Ç–∏–º –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å. –ù–∞–∂–º–∏—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu())

# –î–æ–∫—É–º–µ–Ω—Ç—ã (–¥–ª—è –ê–í–†)
async def document_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user.id
    state = context.user_data.get("state")
    logger.info("document_message_handler user=%s state=%s", user, state)

    # –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –ê–í–†
    if state == "await_avr":
        if not update.message.document:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç).")
            return
        tid = context.user_data.get("complete_id")
        if not tid:
            await update.message.reply_text("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: id –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            context.user_data.clear()
            return
        doc = await update.message.document.get_file()
        path = f"avr_{tid}.pdf"
        await doc.download_to_drive(path)
        c.execute("UPDATE tasks SET avr=? WHERE id=?", (path, tid))
        conn.commit()
        # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—Å—Ç —Ä–µ—à–µ–Ω–∏—è
        context.user_data["state"] = "await_solution"
        await update.message.reply_text("‚úÖ –ê–í–† –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ:")
        return

    # –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏—à—ë–ª –Ω–µ –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç
    await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –æ–∂–∏–¥–∞—é –¥–æ–∫—É–º–µ–Ω—Ç. –ù–∞–∂–º–∏—Ç–µ –º–µ–Ω—é.", reply_markup=main_menu())

# –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É ‚Äî –∫–∞—Ä—Ç–æ—á–∫–∞
async def open_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()
        tid = int(query.data.split("_")[1])
        logger.info("open_task tid=%s user=%s", tid, query.from_user.id)
        # fetch
        c.execute("SELECT * FROM tasks WHERE id=?", (tid,))
        row = c.fetchone()
        if not row:
            await query.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu())
            return
        _, user_id, ttype, client, order, desc, addr, deadline, avr, sol, status = row
        msg = (
            f"üÜî <b>–ó–∞–¥–∞—á–∞ #{tid}</b>\n"
            f"üìå <b>–¢–∏–ø:</b> {'üöó –í—ã–µ–∑–¥–Ω–∞—è' if ttype == 'field' else 'üìù –û–±—â–∞—è'}\n"
        )
        if client: msg += f"üè¢ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client}\n"
        if order: msg += f"‚Ññ <b>–ó–∞—è–≤–∫–∏:</b> {order}\n"
        msg += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n"
        if addr:
            msg += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {addr}\nüîó <a href='https://yandex.ru/maps/?text={addr}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>\n"
        msg += f"‚è∞ <b>–°—Ä–æ–∫:</b> {deadline}\n"
        msg += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞' if status == 'done' else 'üïí –ê–∫—Ç–∏–≤–Ω–∞'}\n"

        if status == "done":
            if sol: msg += f"üìù <b>–†–µ—à–µ–Ω–∏–µ:</b> {sol}\n"

        keyboard = []
        if status != "done":
            keyboard.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{tid}")])
        keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{tid}")])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])

        await query.message.reply_text(msg, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard),
                                       disable_web_page_preview=True)
        # –ï—Å–ª–∏ –µ—Å—Ç—å avr –∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
        if status == "done" and avr:
            try:
                await query.message.reply_document(document=InputFile(avr), caption="üìé –ê–í–†")
            except Exception:
                logger.exception("Failed to send AVR file")
        return
    # –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–µ —á–µ—Ä–µ–∑ callback (—Ä–µ–¥–∫–æ), –∏–≥–Ω–æ—Ä–∏–º
    await update.message.reply_text("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–¥–∞—á–∏.", reply_markup=main_menu())

# –ù–∞—á–∞–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ‚Äî –ø—Ä–æ—Å–∏–º —Ñ–∞–π–ª (–ê–í–†)
async def complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tid = int(query.data.split("_")[1])
    logger.info("User %s starts completing task %s", query.from_user.id, tid)
    context.user_data["complete_id"] = tid
    context.user_data["state"] = "await_avr"
    await query.message.reply_text("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ê–í–† (—Ñ–∞–π–ª):")
    return

# –£–¥–∞–ª–µ–Ω–∏–µ ‚Äî –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tid = int(query.data.split("_")[1])
    logger.info("User %s asks delete for %s", query.from_user.id, tid)
    await query.message.reply_text(f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É #{tid}?", reply_markup=confirm_delete_kb(tid))
    return

async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # —Ñ–æ—Ä–º–∞—Ç confirm_delete_123
    parts = query.data.split("_")
    if len(parts) >= 3:
        tid = int(parts[2])
        c.execute("DELETE FROM tasks WHERE id=?", (tid,))
        conn.commit()
        logger.info("Task %s deleted by user %s", tid, query.from_user.id)
        await query.message.reply_text(f"üóë –ó–∞–¥–∞—á–∞ #{tid} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_menu())
        return
    await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=main_menu())
    return

# ---------- –ó–∞–ø—É—Å–∫ ----------
def main():
    TOKEN = "8288052246:AAH2HkB5MVqBA8M6gINmLCap0wZ7Fyn8jKY"  # <- –í—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω
    app = Application.builder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä
    app.add_handler(CommandHandler("start", start))

    # –∫–ª–∞–≤–∏—à–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    app.add_handler(CallbackQueryHandler(menu_callback, pattern="^(new|current|history|back_main)$"))

    # –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞ (–≤—ã–±–æ—Ä —Ç–∏–ø–∞, –≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞, open/complete/delete/confirm_delete)
    app.add_handler(CallbackQueryHandler(dialog_buttons, pattern="^(general|field|–ú–∞–∫—Å–∞–≤–∏—Ç|–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å|–ì–ª–æ—Ä–∏—è –î–∂–∏–Ω—Å|–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫|–¢–µ–±–æ–π–ª|–¢–∞—Ç–Ω–µ—Ñ—Ç—å|open_\\d+|complete_\\d+|delete_\\d+|confirm_delete_\\d+)$"))

    # –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è open/complete/delete/confirm_delete —á—Ç–æ–±—ã –±—ã—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ (–¥—É–±–ª–∏—Ä—É–µ–º)
    app.add_handler(CallbackQueryHandler(open_task, pattern=r"^open_\d+$"))
    app.add_handler(CallbackQueryHandler(complete_task, pattern=r"^complete_\d+$"))
    app.add_handler(CallbackQueryHandler(delete_task, pattern=r"^delete_\d+$"))
    app.add_handler(CallbackQueryHandler(confirm_delete, pattern=r"^confirm_delete_\d+$"))

    # —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –µ–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_handler))

    # –¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ê–í–†
    app.add_handler(MessageHandler(filters.Document.ALL, document_message_handler))

    logger.info("Bot starting...")
    app.run_polling(allowed_updates=["message", "callback_query", "document"])

if __name__ == "__main__":
    main()
