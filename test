import logging
import sqlite3
import json
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    InputFile
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ConversationHandler, MessageHandler, ContextTypes, filters
)

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ----------------- –ë–î -----------------
conn = sqlite3.connect("tasks.db", check_same_thread=False)
c = conn.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    client TEXT,
    order_number TEXT,
    description TEXT,
    address TEXT,
    deadline TEXT,
    avr TEXT,
    solution TEXT,
    status TEXT
)""")
conn.commit()

# ----------------- –°–û–°–¢–û–Ø–ù–ò–Ø -----------------
CHOOSING_TYPE, CHOOSING_CLIENT, ENTER_ORDER, ENTER_ADDRESS, ENTER_DESCRIPTION, ENTER_DEADLINE, ADD_AVR, ADD_SOLUTION = range(8)

# ----------------- –ö–õ–ê–í–ò–ê–¢–£–†–´ -----------------
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks")],
        [InlineKeyboardButton("üìÇ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")]
    ])

def clients_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ú–∞–∫—Å–∞–≤–∏—Ç", callback_data="client_–ú–∞–∫—Å–∞–≤–∏—Ç")],
        [InlineKeyboardButton("–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å", callback_data="client_–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å")],
        [InlineKeyboardButton("–ì–ª–æ—Ä–∏—è –î–∂–∏–Ω—Å", callback_data="client_–ì–ª–æ—Ä–∏—è –î–∂–∏–Ω—Å")],
        [InlineKeyboardButton("–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫", callback_data="client_–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫")],
        [InlineKeyboardButton("–¢–µ–±–æ–π–ª", callback_data="client_–¢–µ–±–æ–π–ª")],
        [InlineKeyboardButton("–¢–∞—Ç–Ω–µ—Ñ—Ç—å", callback_data="client_–¢–∞—Ç–Ω–µ—Ñ—Ç—å")]
    ])

def done_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚úÖ", callback_data="done_avr")]
    ])

# ----------------- –•–ï–ù–î–õ–ï–†–´ -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "new_task":
        context.user_data.clear()
        context.user_data["type"] = "–í—ã–µ–∑–¥–Ω–∞—è"
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=clients_keyboard())
        return CHOOSING_CLIENT
    elif query.data == "my_tasks":
        user = query.from_user.id
        c.execute("SELECT id, client, address, description, deadline FROM tasks WHERE user_id=? AND status='active'", (user,))
        tasks = c.fetchall()
        if not tasks:
            await query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.", reply_markup=main_menu())
        else:
            kb = [[InlineKeyboardButton(f"{t[1]} ‚Äî {t[2]}", callback_data=f"task_{t[0]}")] for t in tasks]
            await query.message.reply_text("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=InlineKeyboardMarkup(kb))
    elif query.data == "history":
        user = query.from_user.id
        c.execute("SELECT id, client, address FROM tasks WHERE user_id=? AND status='closed'", (user,))
        tasks = c.fetchall()
        if not tasks:
            await query.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=main_menu())
        else:
            kb = [[InlineKeyboardButton(f"{t[1]} ‚Äî {t[2]}", callback_data=f"history_{t[0]}")] for t in tasks]
            await query.message.reply_text("üìÇ –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫:", reply_markup=InlineKeyboardMarkup(kb))

async def choose_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    client = query.data.split("_", 1)[1]
    context.user_data["client"] = client
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:")
    return ENTER_ORDER

async def enter_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["order_number"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    return ENTER_ADDRESS

async def enter_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    return ENTER_DESCRIPTION

async def enter_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ (–î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú):")
    return ENTER_DEADLINE

async def enter_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["deadline"] = update.message.text
    user = update.message.from_user.id
    ud = context.user_data
    c.execute("""INSERT INTO tasks (user_id, type, client, order_number, description, address, deadline, status)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
              (user, ud["type"], ud["client"], ud["order_number"], ud["description"], ud["address"], ud["deadline"], "active"))
    conn.commit()
    tid = c.lastrowid
    ud["task_id"] = tid
    ud["avr_files"] = []
    await update.message.reply_text("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ê–í–† (pdf/jpg/png/heic). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=done_keyboard())
    return ADD_AVR

async def add_avr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tid = context.user_data.get("task_id")
    file = update.message.document or update.message.photo[-1]
    if update.message.document:
        tg_file = await file.get_file()
        filename = file.file_name or f"avr_{tid}"
    else:
        tg_file = await file.get_file()
        filename = f"photo_{tid}.jpg"
    path = f"avr_{tid}_{filename}"
    await tg_file.download_to_drive(path)
    context.user_data["avr_files"].append({"path": path, "name": filename})
    await update.message.reply_text("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ ‚úÖ¬ª", reply_markup=done_keyboard())
    return ADD_AVR

async def done_avr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tid = context.user_data.get("task_id")
    avr_files = context.user_data.get("avr_files", [])
    c.execute("UPDATE tasks SET avr=? WHERE id=?", (json.dumps(avr_files), tid))
    conn.commit()
    await query.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è:")
    return ADD_SOLUTION

async def add_solution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tid = context.user_data.get("task_id")
    solution = update.message.text
    c.execute("UPDATE tasks SET solution=?, status='closed' WHERE id=?", (solution, tid))
    conn.commit()
    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é.", reply_markup=main_menu())
    context.user_data.clear()
    return ConversationHandler.END

async def task_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tid = int(query.data.split("_")[1])
    c.execute("SELECT client, address, description, deadline FROM tasks WHERE id=?", (tid,))
    task = c.fetchone()
    if task:
        await query.message.reply_text(f"üìå {task[0]} ‚Äî {task[1]}\nüìù {task[2]}\n‚è∞ {task[3]}")

async def history_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tid = int(query.data.split("_")[1])
    c.execute("SELECT client, address, description, deadline, avr, solution FROM tasks WHERE id=?", (tid,))
    task = c.fetchone()
    if task:
        client, addr, desc, deadline, avr, sol = task
        await query.message.reply_text(f"üìå {client} ‚Äî {addr}\nüìù {desc}\n‚è∞ {deadline}\nüí° –†–µ—à–µ–Ω–∏–µ: {sol}")
        if avr:
            avr_files = json.loads(avr)
            for f in avr_files:
                await query.message.reply_document(
                    document=InputFile(f["path"], filename=f["name"]),
                    caption=f"üìé {f['name']}"
                )

# ----------------- MAIN -----------------
def main():
    TOKEN = "–í–°–¢–ê–í–¨_–°–í–û–ô_–¢–û–ö–ï–ù"

    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(menu_handler, pattern="^(new_task)$")],
        states={
            CHOOSING_CLIENT: [CallbackQueryHandler(choose_client, pattern="^client_")],
            ENTER_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_order)],
            ENTER_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_address)],
            ENTER_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_description)],
            ENTER_DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_deadline)],
            ADD_AVR: [
                MessageHandler((filters.Document.ALL | filters.PHOTO), add_avr),
                CallbackQueryHandler(done_avr, pattern="^done_avr$")
            ],
            ADD_SOLUTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_solution)],
        },
        fallbacks=[],
        allow_reentry=True
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(menu_handler, pattern="^(my_tasks|history)$"))
    app.add_handler(CallbackQueryHandler(task_info, pattern="^task_"))
    app.add_handler(CallbackQueryHandler(history_info, pattern="^history_"))

    app.run_polling()

if __name__ == "__main__":
    main()
