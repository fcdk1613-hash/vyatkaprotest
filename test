import logging
import sqlite3
from datetime import datetime
from urllib.parse import quote_plus

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, ContextTypes, filters
)

# –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù
TOKEN = "8288052246:AAH2HkB5MVqBA8M6gINmLCap0wZ7Fyn8jKY"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

(
    MAIN_MENU,
    NEW_TASK_TYPE,
    GENERAL_TEXT,
    TRAVEL_NUMBER,
    TRAVEL_CLIENT,
    TRAVEL_ADDRESS,
    TRAVEL_DESCRIPTION,
    TRAVEL_DEADLINE,
    CLOSE_AVR,
    CLOSE_SOLUTION,
) = range(10)

CLIENTS = ["–ú–∞–∫—Å–∞–≤–∏—Ç", "–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å", "–ì–ª–æ—Ä–∏—è –î–∂–∏–Ω—Å", "–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫", "–¢–µ–±–æ–π–ª", "–¢–∞—Ç–Ω–µ—Ñ—Ç—å"]

def init_db():
    conn = sqlite3.connect("tasks.db")
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        type TEXT,
        number TEXT,
        client TEXT,
        address TEXT,
        description TEXT,
        deadline TEXT,
        status TEXT,
        avr_file TEXT,
        solution TEXT
    )
    """)
    conn.commit()
    conn.close()

def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="my_tasks")],
        [InlineKeyboardButton("üìÇ –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.", reply_markup=main_menu_keyboard())
    return MAIN_MENU

# === –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á ===

async def new_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üìù –û–±—â–∞—è –∑–∞–¥–∞—á–∞", callback_data="general")],
        [InlineKeyboardButton("üöó –í—ã–µ–∑–¥–Ω–∞—è –∑–∞–¥–∞—á–∞", callback_data="travel")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return NEW_TASK_TYPE

async def general_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("‚úè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    return GENERAL_TEXT

async def save_general_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    conn = sqlite3.connect("tasks.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO tasks (type, description, status) VALUES (?, ?, ?)", ("general", text, "current"))
    conn.commit()
    conn.close()
    await update.message.reply_text("‚úÖ –û–±—â–∞—è –∑–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())
    return MAIN_MENU

async def travel_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:")
    return TRAVEL_NUMBER

async def save_travel_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["number"] = update.message.text
    keyboard = [[InlineKeyboardButton(c, callback_data=f"client_{c}")] for c in CLIENTS]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    return TRAVEL_CLIENT

async def save_travel_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    client = query.data.replace("client_", "")
    context.user_data["client"] = client
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    return TRAVEL_ADDRESS

async def save_travel_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    return TRAVEL_DESCRIPTION

async def save_travel_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú")
    return TRAVEL_DEADLINE

async def save_travel_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    deadline = update.message.text
    try:
        datetime.strptime(deadline, "%d.%m.%y %H:%M")
    except ValueError:
        await update.message.reply_text("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: –î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú")
        return TRAVEL_DEADLINE
    context.user_data["deadline"] = deadline
    data = context.user_data
    conn = sqlite3.connect("tasks.db")
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO tasks (type, number, client, address, description, deadline, status)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, ("travel", data["number"], data["client"], data["address"], data["description"], data["deadline"], "current"))
    conn.commit()
    conn.close()
    await update.message.reply_text("‚úÖ –í—ã–µ–∑–¥–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=main_menu_keyboard())
    return MAIN_MENU

# === –†–∞–±–æ—Ç–∞ —Å –∑–∞–¥–∞—á–∞–º–∏ ===

async def my_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    conn = sqlite3.connect("tasks.db")
    cur = conn.cursor()
    cur.execute("SELECT id, type, number, client, address, description, deadline FROM tasks WHERE status='current'")
    rows = cur.fetchall()
    conn.close()
    if not rows:
        await query.edit_message_text("üìã –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á.", reply_markup=main_menu_keyboard())
        return MAIN_MENU
    keyboard = []
    for row in rows:
        if row[1] == "travel":
            keyboard.append([InlineKeyboardButton(f"üöó {row[3]} | {row[4]}", callback_data=f"task_{row[0]}")])
        else:
            keyboard.append([InlineKeyboardButton(f"üìù {row[5]}", callback_data=f"task_{row[0]}")])
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")])
    await query.edit_message_text("üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    return MAIN_MENU

async def task_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.replace("task_", ""))
    conn = sqlite3.connect("tasks.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM tasks WHERE id=?", (task_id,))
    task = cur.fetchone()
    conn.close()
    text = f"üÜî –ó–∞–¥–∞—á–∞ #{task[0]}\n–¢–∏–ø: {task[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {task[5]}"
    if task[1] == "travel":
        text += f"\n–ù–æ–º–µ—Ä: {task[2]}\n–ö–ª–∏–µ–Ω—Ç: {task[3]}\n–ê–¥—Ä–µ—Å: {task[4]}\n–°—Ä–æ–∫: {task[6]}"
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"close_{task[0]}")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task[0]}")],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="my_tasks")]
    ]
    if task[1] == "travel":
        map_url = f"https://yandex.ru/maps/?text={quote_plus(task[4])}"
        keyboard.insert(0, [InlineKeyboardButton("üìç –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", url=map_url)])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return MAIN_MENU

async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.replace("delete_", ""))
    conn = sqlite3.connect("tasks.db")
    cur = conn.cursor()
    cur.execute("DELETE FROM tasks WHERE id=?", (task_id,))
    conn.commit()
    conn.close()
    await query.edit_message_text("üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_menu_keyboard())
    return MAIN_MENU

# === –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á ===

async def close_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.replace("close_", ""))
    context.user_data["closing_task_id"] = task_id
    await query.edit_message_text("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –ê–í–† (jpg/png/heic/pdf):")
    return CLOSE_AVR

async def save_avr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task_id = context.user_data["closing_task_id"]
    file = None
    if update.message.document:
        file = update.message.document
    elif update.message.photo:
        file = update.message.photo[-1]
    if not file:
        await update.message.reply_text("‚ö† –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª (jpg/png/heic/pdf).")
        return CLOSE_AVR
    file_path = f"avr_{task_id}_{file.file_unique_id}"
    new_file = await file.get_file()
    await new_file.download_to_drive(file_path)
    context.user_data["avr_file"] = file_path
    await update.message.reply_text("‚úè –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è:")
    return CLOSE_SOLUTION

async def save_solution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    solution = update.message.text
    task_id = context.user_data["closing_task_id"]
    conn = sqlite3.connect("tasks.db")
    cur = conn.cursor()
    cur.execute("UPDATE tasks SET status=?, avr_file=?, solution=? WHERE id=?",
                ("done", context.user_data.get("avr_file"), solution, task_id))
    conn.commit()
    conn.close()
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é.", reply_markup=main_menu_keyboard())
    return MAIN_MENU

# === –ò—Å—Ç–æ—Ä–∏—è ===

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    conn = sqlite3.connect("tasks.db")
    cur = conn.cursor()
    cur.execute("SELECT id, type, number, client, address, description, deadline FROM tasks WHERE status='done'")
    rows = cur.fetchall()
    conn.close()
    if not rows:
        await query.edit_message_text("üìÇ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=main_menu_keyboard())
        return MAIN_MENU
    keyboard = [[InlineKeyboardButton(f"#{row[0]} {row[1]} | {row[5]}", callback_data=f"hist_{row[0]}")] for row in rows]
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main")])
    await query.edit_message_text("üìÇ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á:", reply_markup=InlineKeyboardMarkup(keyboard))
    return MAIN_MENU

async def history_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    task_id = int(query.data.replace("hist_", ""))
    conn = sqlite3.connect("tasks.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM tasks WHERE id=?", (task_id,))
    task = cur.fetchone()
    conn.close()
    text = f"üÜî –ó–∞–¥–∞—á–∞ #{task[0]}\n–¢–∏–ø: {task[1]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {task[5]}"
    if task[1] == "travel":
        text += f"\n–ù–æ–º–µ—Ä: {task[2]}\n–ö–ª–∏–µ–Ω—Ç: {task[3]}\n–ê–¥—Ä–µ—Å: {task[4]}\n–°—Ä–æ–∫: {task[6]}"
    text += f"\nüìé –†–µ—à–µ–Ω–∏–µ: {task[9]}"
    await query.message.reply_text(text)
    if task[8]:
        try:
            with open(task[8], "rb") as f:
                await query.message.reply_document(InputFile(f))
        except Exception:
            await query.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.")
    return MAIN_MENU

# === Callback router ===

async def callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = update.callback_query.data
    if data == "new_task":
        return await new_task(update, context)
    elif data == "general":
        return await general_task(update, context)
    elif data == "travel":
        return await travel_task(update, context)
    elif data == "my_tasks":
        return await my_tasks(update, context)
    elif data.startswith("task_"):
        return await task_detail(update, context)
    elif data.startswith("delete_"):
        return await delete_task(update, context)
    elif data.startswith("close_"):
        return await close_task(update, context)
    elif data == "history":
        return await history(update, context)
    elif data.startswith("hist_"):
        return await history_detail(update, context)
    elif data.startswith("client_"):
        return await save_travel_client(update, context)
    elif data == "back_main":
        await update.callback_query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
        return MAIN_MENU

def main():
    init_db()
    app = Application.builder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [CallbackQueryHandler(callbacks)],
            NEW_TASK_TYPE: [CallbackQueryHandler(callbacks)],
            GENERAL_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_general_text)],
            TRAVEL_NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_travel_number)],
            TRAVEL_CLIENT: [CallbackQueryHandler(callbacks)],
            TRAVEL_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_travel_address)],
            TRAVEL_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_travel_description)],
            TRAVEL_DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_travel_deadline)],
            CLOSE_AVR: [MessageHandler(filters.ALL & ~filters.COMMAND, save_avr)],
            CLOSE_SOLUTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_solution)],
        },
        fallbacks=[CommandHandler("start", start)],
    )
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
