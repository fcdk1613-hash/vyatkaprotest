import sqlite3
import json
import os
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ConversationHandler, ContextTypes
)

# ================== –ë–ê–ó–ê ==================
conn = sqlite3.connect("tasks.db", check_same_thread=False)
c = conn.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    client TEXT,
    order_number TEXT,
    description TEXT,
    address TEXT,
    deadline TEXT,
    avr TEXT,
    solution TEXT,
    status TEXT
)""")
conn.commit()

# ================== –°–û–°–¢–û–Ø–ù–ò–Ø ==================
CHOOSING_TYPE, CHOOSING_CLIENT, ENTER_ORDER, ENTER_ADDRESS, ENTER_DESCRIPTION, \
ENTER_DEADLINE, WAITING_AVR, WAITING_SOLUTION = range(8)

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —Å–æ–∑–¥–∞–¥–∏–º)
FILES_DIR = "avr_files"
os.makedirs(FILES_DIR, exist_ok=True)

# ================== –ö–ù–û–ü–ö–ò ==================
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new")],
        [InlineKeyboardButton("üìå –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏", callback_data="current")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", callback_data="history")]
    ])

def type_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìù –û–±—â–∞—è", callback_data="general"),
         InlineKeyboardButton("üöó –í—ã–µ–∑–¥–Ω–∞—è", callback_data="field")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

def client_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üè¢ –ú–∞–∫—Å–∞–≤–∏—Ç", callback_data="–ú–∞–∫—Å–∞–≤–∏—Ç"),
         InlineKeyboardButton("üè≠ –ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å", callback_data="–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å")],
        [InlineKeyboardButton("üëó –ì–ª–æ—Ä–∏—è –î–∂–∏–Ω—Å", callback_data="–ì–ª–æ—Ä–∏—è –î–∂–∏–Ω—Å"),
         InlineKeyboardButton("üõí –ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫", callback_data="–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫")],
        [InlineKeyboardButton("‚õΩ –¢–µ–±–æ–π–ª", callback_data="–¢–µ–±–æ–π–ª"),
         InlineKeyboardButton("‚õΩ –¢–∞—Ç–Ω–µ—Ñ—Ç—å", callback_data="–¢–∞—Ç–Ω–µ—Ñ—Ç—å")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])

def confirm_delete_kb(tid):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"confirm_delete_{tid}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"open_{tid}")]
    ])

# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏.", reply_markup=main_menu())

# ---- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "new":
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:", reply_markup=type_menu())
        return CHOOSING_TYPE

# ---- –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ ----
async def show_current(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    c.execute("SELECT id, type, client, address, description FROM tasks WHERE status='active' ORDER BY id DESC")
    tasks = c.fetchall()
    if not tasks:
        await query.message.reply_text("üì≠ –ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á.", reply_markup=main_menu())
        return
    kb = []
    for t in tasks:
        tid, ttype, client, addr, desc = t
        if ttype == "field":
            label = f"#{tid} {client} | {addr}"
        else:
            label = f"#{tid} {desc[:30]}..."
        kb.append([InlineKeyboardButton(f"üîé {label}", callback_data=f"open_{tid}")])
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])
    await query.message.reply_text("üìå –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:", reply_markup=InlineKeyboardMarkup(kb))

# ---- –ò—Å—Ç–æ—Ä–∏—è ----
async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    c.execute("SELECT id, type, client, address, description FROM tasks WHERE status='done' ORDER BY id DESC LIMIT 10")
    tasks = c.fetchall()
    if not tasks:
        await query.message.reply_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.", reply_markup=main_menu())
        return
    kb = []
    for t in tasks:
        tid, ttype, client, addr, desc = t
        if ttype == "field":
            label = f"#{tid} {client} | {addr}"
        else:
            label = f"#{tid} {desc[:30]}..."
        kb.append([InlineKeyboardButton(f"üìú {label}", callback_data=f"open_{tid}")])
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])
    await query.message.reply_text("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:", reply_markup=InlineKeyboardMarkup(kb))

# ---- –ù–∞–∑–∞–¥ ----
async def back_to_main(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    return ConversationHandler.END

# ---- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á ----
async def choose_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    context.user_data["type"] = query.data
    await query.answer()
    if query.data == "field":
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=client_menu())
        return CHOOSING_CLIENT
    else:
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        return ENTER_DESCRIPTION

async def choose_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    context.user_data["client"] = query.data
    await query.answer()
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:")
    return ENTER_ORDER

async def enter_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["order_number"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:")
    return ENTER_ADDRESS

async def enter_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    return ENTER_DESCRIPTION

async def enter_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ (–î–î.–ú–ú.–ì–ì –ß–ß:–ú–ú):")
    return ENTER_DEADLINE

# ---- –í–≤–æ–¥ —Å—Ä–æ–∫–∞ ----
async def enter_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["deadline"] = update.message.text
    ud = context.user_data

    c.execute("""INSERT INTO tasks (user_id, type, client, order_number, description, address, deadline, status)
                 VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
              (update.effective_user.id, ud.get("type"), ud.get("client"),
               ud.get("order_number"), ud.get("description"), ud.get("address"),
               ud.get("deadline"), "active"))
    conn.commit()

    context.user_data.clear()
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–∏–µ!", reply_markup=main_menu())
    return ConversationHandler.END

# ---- –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É ----
async def open_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tid = int(query.data.split("_")[1])
    c.execute("SELECT * FROM tasks WHERE id=?", (tid,))
    row = c.fetchone()
    if row:
        _, user_id, ttype, client, order, desc, addr, deadline, avr, sol, status = row
        msg = (
            f"üÜî <b>–ó–∞–¥–∞—á–∞ #{tid}</b>\n"
            f"üìå <b>–¢–∏–ø:</b> {'üöó –í—ã–µ–∑–¥–Ω–∞—è' if ttype == 'field' else 'üìù –û–±—â–∞—è'}\n"
        )
        if client: msg += f"üè¢ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client}\n"
        if order: msg += f"‚Ññ <b>–ó–∞—è–≤–∫–∏:</b> {order}\n"
        msg += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {desc}\n"
        if addr:
            msg += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {addr}\nüîó <a href='https://yandex.ru/maps/?text={addr}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>\n"
        msg += f"‚è∞ <b>–°—Ä–æ–∫:</b> {deadline}\n"
        msg += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞' if status == 'done' else 'üïí –ê–∫—Ç–∏–≤–Ω–∞'}\n"

        kb = []
        if status == "done":
            if sol: msg += f"üìù <b>–†–µ—à–µ–Ω–∏–µ:</b> {sol}\n"
            if avr:
                try:
                    avr_files = json.loads(avr)
                    for f in avr_files:
                        # f is dict {"path": ..., "name": ...}
                        await query.message.reply_document(
                            document=InputFile(f["path"]),
                            caption=f"üìé {f['name']}"
                        )
                except Exception:
                    pass
        else:
            kb.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{tid}")])

        kb.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{tid}")])
        kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")])

        await query.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(kb),
                                       parse_mode="HTML", disable_web_page_preview=True)

# ---- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ----
async def complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tid = int(query.data.split("_")[1])
    context.user_data["complete_id"] = tid
    context.user_data["avr_files"] = []
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é + –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üá¨ –ì–æ—Ç–æ–≤–æ", callback_data=f"avr_done_{tid}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"open_{tid}")]
    ])
    await query.message.reply_text(
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –ê–í–† (pdf/jpg/png/heic).\n"
        "–ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=kb
    )
    return WAITING_AVR

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
async def avr_done_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # callback_data = avr_done_<tid>
    parts = query.data.split("_")
    if len(parts) >= 3:
        tid = int(parts[2])
    else:
        tid = context.user_data.get("complete_id")
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ —Ñ–∞–π–ª–æ–≤
    avr_files = context.user_data.get("avr_files", [])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (JSON)
    try:
        avr_json = json.dumps(avr_files, ensure_ascii=False)
        c.execute("UPDATE tasks SET avr=? WHERE id=?", (avr_json, tid))
        conn.commit()
    except Exception as e:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=main_menu())
        context.user_data.clear()
        return ConversationHandler.END

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ä–µ—à–µ–Ω–∏—è
    context.user_data["complete_id"] = tid
    await query.message.reply_text("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ (–∫–æ—Ä–æ—Ç–∫–æ):")
    return WAITING_SOLUTION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ì–æ—Ç–æ–≤–æ" —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç —Å–ª–æ–≤–æ)
# (receive_avr —É–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª —Ç–µ–∫—Å—Ç "–≥–æ—Ç–æ–≤–æ" ‚Äî –Ω–æ —Ç–µ–ø–µ—Ä—å –ª–æ–≥–∏—á–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤ conv)
# ---- –ü—Ä–∏—ë–º –ê–í–†-—Ñ–∞–π–ª–æ–≤ (–¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ñ–æ—Ç–æ) ----
async def receive_avr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tid = context.user_data.get("complete_id")
    if not tid:
        await update.message.reply_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: id –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu())
        context.user_data.clear()
        return ConversationHandler.END

    allowed_ext = (".pdf", ".jpg", ".jpeg", ".png", ".heic")

    # –î–æ–∫—É–º–µ–Ω—Ç
    if update.message.document:
        file = update.message.document
        tg_file = await file.get_file()
        filename = file.file_name or f"avr_{tid}"
        if not filename.lower().endswith(allowed_ext):
            await update.message.reply_text("‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ PDF/JPG/PNG/HEIC.")
            return WAITING_AVR
        # —Å–æ–∑–¥–∞—ë–º –ø—É—Ç—å –≤ –ø–∞–ø–∫–µ
        safe_name = filename.replace("/", "_").replace("\\", "_")
        path = os.path.join(FILES_DIR, f"avr_{tid}_{safe_name}")
        await tg_file.download_to_drive(path)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º dict
        context.user_data.setdefault("avr_files", []).append({"path": path, "name": filename})
        await update.message.reply_text(f"‚úÖ –§–∞–π–ª {filename} —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
        return WAITING_AVR

    # –§–æ—Ç–æ
    if update.message.photo:
        photo = update.message.photo[-1]
        tg_file = await photo.get_file()
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º unique id –¥–ª—è –∏–º–µ–Ω–∏
        filename = f"photo_{tid}_{photo.file_unique_id}.jpg"
        path = os.path.join(FILES_DIR, filename)
        await tg_file.download_to_drive(path)
        context.user_data.setdefault("avr_files", []).append({"path": path, "name": filename})
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
        return WAITING_AVR

    # –¢–µ–∫—Å—Ç "–≥–æ—Ç–æ–≤–æ" (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç)
    if update.message.text and update.message.text.strip().lower() in ("–≥–æ—Ç–æ–≤–æ", "–≥–æ—Ç–æ–≤–æ."):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ –ë–î
        avr_json = json.dumps(context.user_data.get("avr_files", []), ensure_ascii=False)
        c.execute("UPDATE tasks SET avr=? WHERE id=?", (avr_json, tid))
        conn.commit()
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ (–∫–æ—Ä–æ—Ç–∫–æ):")
        return WAITING_SOLUTION

    # –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–≤–æ–¥
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª (pdf/jpg/png/heic) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª.")
    return WAITING_AVR

# ---- –ü—Ä–∏—ë–º —Ä–µ—à–µ–Ω–∏—è ----
async def receive_solution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tid = context.user_data.get("complete_id")
    if not tid:
        await update.message.reply_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: id –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu())
        context.user_data.clear()
        return ConversationHandler.END
    sol = update.message.text
    c.execute("UPDATE tasks SET solution=?, status=? WHERE id=?", (sol, "done", tid))
    conn.commit()
    context.user_data.clear()
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é!", reply_markup=main_menu())
    return ConversationHandler.END

# ---- –£–¥–∞–ª–µ–Ω–∏–µ ----
async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tid = int(query.data.split("_")[1])
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"confirm_delete_{tid}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"open_{tid}")]
    ])
    await query.message.reply_text(f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É #{tid}?", reply_markup=kb)

async def confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tid = int(query.data.split("_")[2])
    c.execute("DELETE FROM tasks WHERE id=?", (tid,))
    conn.commit()
    await query.message.reply_text(f"üóë –ó–∞–¥–∞—á–∞ #{tid} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_menu())

# ================== MAIN ==================
def main():
    TOKEN = "8288052246:AAH2HkB5MVqBA8M6gINmLCap0wZ7Fyn8jKY"

    app = Application.builder().token(TOKEN).build()
    app.bot.delete_webhook(drop_pending_updates=True)

    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(menu_handler, pattern="^new$")],
        states={
            CHOOSING_TYPE: [CallbackQueryHandler(choose_type, pattern="^(general|field)$")],
            CHOOSING_CLIENT: [CallbackQueryHandler(choose_client)],
            ENTER_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_order)],
            ENTER_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_address)],
            ENTER_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_description)],
            ENTER_DEADLINE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_deadline)],
            WAITING_AVR: [
                MessageHandler(filters.Document.ALL, receive_avr),
                MessageHandler(filters.PHOTO, receive_avr),
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_avr),
                CallbackQueryHandler(avr_done_callback, pattern=r"^avr_done_\d+$"),  # –∫–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
            ],
            WAITING_SOLUTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_solution)],
        },
        fallbacks=[CallbackQueryHandler(back_to_main, pattern="^back_main$")],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv)

    # –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(show_current, pattern="^current$"))
    app.add_handler(CallbackQueryHandler(show_history, pattern="^history$"))
    app.add_handler(CallbackQueryHandler(back_to_main, pattern="^back_main$"))

    # –∑–∞–¥–∞—á–∏
    app.add_handler(CallbackQueryHandler(open_task, pattern=r"^open_\d+$"))
    app.add_handler(CallbackQueryHandler(complete_task, pattern=r"^complete_\d+$"))
    app.add_handler(CallbackQueryHandler(delete_task, pattern=r"^delete_\d+$"))
    app.add_handler(CallbackQueryHandler(confirm_delete, pattern=r"^confirm_delete_\d+$"))

    app.run_polling()

if __name__ == "__main__":
    main()
